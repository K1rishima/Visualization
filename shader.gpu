

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
varying vec3 newColor;
uniform vec3 lightColor, lightPosition;
uniform vec4 color;
void main() {
    vec3 N = normalize(normal);
    vec3 L = normalize(lightPosition - vertex);
    // Lambert's cosine law
    float lambertian = max(dot(N, L), 0.0);
    float specular = 0.0;
    if(lambertian > 0.0) {
        vec3 R = reflect(-L, N);      // Reflected light vector
        vec3 V = normalize(-vertex); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 50.0);
    }
    newColor = color.rgb*0.1+lambertian*color.rgb+lightColor*specular;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 newColor;
void main() {
    gl_FragColor = vec4(newColor,1.0);
}`;