

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;

varying vec3 normalVar;
varying vec3 vertexVar;

void main() {
    normalVar = normal;
    vertexVar = vertex;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 normalVar;
varying vec3 vertexVar;
uniform vec3 lightDir;
uniform vec3 lightPos;
uniform float angle;
uniform float diffusion;

void main() {
     vec3 toLight = normalize(lightPos-vertexVar);
    vec3 toView = normalize(-vertexVar);
    vec3 halfVector = normalize(toLight + toView);
    vec3 N = normalize(normalVar);
    float dotFromDirection = dot(toLight, 
                               -lightDir);
    float inLight = smoothstep(angle,angle+diffusion, dotFromDirection);
    float light = inLight * dot(N, toLight);
    float specular = inLight * pow(dot(N, halfVector), 150.0);
    vec3 shaded = color.rgb*light+specular;
    
    gl_FragColor = vec4(shaded,1.0);
    if(angle<0.0){
      gl_FragColor = vec4(1.0);
    }
}`;