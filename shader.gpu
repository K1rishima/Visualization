

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texCoord;
uniform mat4 ModelViewProjectionMatrix;

uniform vec2 textTr;

varying vec3 normalVar;
varying vec3 vertexVar;
varying vec2 textureVar;

uniform float angle;

mat4 translation(vec3 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = t.z;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 scaling(float s){
    mat4 dst;

    dst[0][0] = s;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = s;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = s;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}

void main() {
   vec4 tr1 = translation(vec3(-textTr,0.0))*vec4(texCoord,0.,1.);
   vec4 scl = scaling(angle)*tr1;
   vec4 tr2 = translation(vec3(textTr,0.0))*scl;
   textureVar = vec2(tr2.x,tr2.y);
    normalVar = normal;
    vertexVar = vertex;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 normalVar;
varying vec3 vertexVar;
varying vec2 textureVar;
uniform vec3 lightDir;
uniform vec3 lightPos;
uniform float angle;
uniform float diffusion;

uniform sampler2D tmu;

void main() {
     vec3 toLight = normalize(lightPos-vertexVar);
    vec3 toView = normalize(-vertexVar);
    vec3 halfVector = normalize(toLight + toView);
    vec3 N = normalize(normalVar);
    float dotFromDirection = dot(toLight, 
                               -lightDir);
    float inLight = smoothstep(angle,angle+diffusion, dotFromDirection);
    float light = inLight * dot(N, toLight);
    float specular = inLight * pow(dot(N, halfVector), 150.0);
    vec3 shaded = color.rgb*light+specular;
    
    gl_FragColor = vec4(shaded,1.0);
    vec4 texColor = texture2D(tmu, textureVar);
    gl_FragColor = vec4(textureVar,1.0,1.0);
    gl_FragColor = texture2D(tmu, textureVar);
    if(angle<0.0){
      gl_FragColor = vec4(1.0);
    }
}`;